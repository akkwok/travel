!function(){try{var loc=window.location||{};var proto=(loc.protocol||'').toLowerCase();var host=(loc.hostname||'').toLowerCase();if(proto==='file:'){}else{var ok=['akfamilytravel.netlify.app', 'localhost', '127.0.0.1'].some(function(d){{return host.endsWith(String(d).toLowerCase());}});if(!ok){{console.warn('Domain-locked: '+host);return;}}}}catch(_){return;}$(function () { const FADE_MS = 500; const HOLD_MS = 700; const RESUME_DELAY = 150; const MQ = window.matchMedia('(max-width:1080px)'); const $pAll = $('.num_area p').filter(function () { return /\bp_(\d+)\b/.test(this.className); }); const items = $pAll.toArray().sort((a, b) => { const na = parseInt(a.className.match(/\bp_(\d+)\b/)[1], 10); const nb = parseInt(b.className.match(/\bp_(\d+)\b/)[1], 10); return na - nb; }); let idx = 0; let autoplayTimer = null; let hoveringCount = 0; let isAutoplaying = false; const offAll = () => $pAll.removeClass('on'); const onAt = (i) => $(items[i]).addClass('on'); const clearTimer = () => { if (autoplayTimer) { clearTimeout(autoplayTimer); autoplayTimer = null; } }; function step() { if (hoveringCount > 0) { isAutoplaying = false; return; } isAutoplaying = true; offAll(); onAt(idx); autoplayTimer = setTimeout(() => { if (hoveringCount > 0) { isAutoplaying = false; return; } offAll(); autoplayTimer = setTimeout(() => { if (hoveringCount > 0) { isAutoplaying = false; return; } idx = (idx + 1) % items.length; step(); }, FADE_MS); }, HOLD_MS); } const startAutoplay = () => { if (MQ.matches) return; if (!isAutoplaying && hoveringCount === 0) { clearTimer(); step(); } }; const stopAutoplay = () => { isAutoplaying = false; clearTimer(); }; const onMQChange = (e) => { if (e.matches) { stopAutoplay(); offAll(); } else { startAutoplay(); } }; (MQ.addEventListener ? MQ.addEventListener('change', onMQChange) : MQ.addListener(onMQChange)); const COLOR_CLASSES = ['cor_fm', 'cor_love', 'cor_child', 'cor_bro', 'cor_friend']; function pad2(nStr) { return ('' + nStr).padStart(2, '0'); } function pickColorClass($el) { for (const c of COLOR_CLASSES) if ($el.hasClass(c)) return c; return null; } function getStopNumber($stop) { const $badge = $stop.find('.badge').first(); if (!$badge.length) return null; const nText = $badge.clone().children().remove().end().text().trim(); const n = parseInt(nText, 10); if (Number.isNaN(n)) return null; return pad2(n); } const stopIndex = {}; $('.timeline li.stop').each(function () { const id = getStopNumber($(this)); if (id) stopIndex[id] = $(this); }); const TL_ALIAS = { '33': '10', '15': '12', '20': '02', '30': '18', '24': '14', '29': '04' }; const PIN_TO_TL = { '10': ['10','33'], '12': ['12','15'], '02': ['02','20'], '18': ['18','30'], '14': ['14','24'], '04': ['04','29'] }; function pToTimelineIds(id) { return PIN_TO_TL[id] || [id]; } function setTimelineHoverByIds(ids, on) { ids.forEach(id => { const $stop = stopIndex[id]; if (!$stop || !$stop.length) return; const $badge = $stop.find('.badge').first(); const $title = $stop.find('h3.card-title').first(); if (on) { $stop.addClass('tl-hover'); if ($title.length) { $title.removeClass(COLOR_CLASSES.join(' ')); const color = pickColorClass($badge); if (color) $title.addClass(color); } } else { $stop.removeClass('tl-hover'); if ($title.length) $title.removeClass(COLOR_CLASSES.join(' ')); } }); } $('.mark_area').on('mouseenter', 'a', function () { hoveringCount++; stopAutoplay(); const m = this.className.match(/\bt_(\d+)\b/); if (!m) return; const id = pad2(m[1]); offAll(); $('.num_area .p_' + id).addClass('on'); const tlTargets = PIN_TO_TL[id] || [id]; setTimelineHoverByIds(tlTargets, true); const targetId = pickFirstExistingId(tlTargets); if (targetId) scrollToStopId(targetId, 'center'); }); $('.mark_area').on('mouseleave', 'a', function () { const m = this.className.match(/\bt_(\d+)\b/); if (m) { const id = pad2(m[1]); $('.num_area .p_' + id).removeClass('on'); const tlTargets = PIN_TO_TL[id] || [id]; setTimelineHoverByIds(tlTargets, false); } hoveringCount = Math.max(0, hoveringCount - 1); if (hoveringCount === 0) { clearTimer(); setTimeout(() => { if (hoveringCount === 0) startAutoplay(); }, RESUME_DELAY); } }); $('.timeline').on('mouseenter', 'li.stop', function () { hoveringCount++; stopAutoplay(); const id = getStopNumber($(this)); if (!id) return; const targetId = TL_ALIAS[id] || id; offAll(); $('.num_area .p_' + targetId).addClass('on'); setTimelineHoverByIds([id], true); }); $('.timeline').on('mouseleave', 'li.stop', function () { const id = getStopNumber($(this)); if (id) { const targetId = TL_ALIAS[id] || id; $('.num_area .p_' + targetId).removeClass('on'); setTimelineHoverByIds([id], false); } hoveringCount = Math.max(0, hoveringCount - 1); if (hoveringCount === 0) { clearTimer(); setTimeout(() => { if (hoveringCount === 0) startAutoplay(); }, RESUME_DELAY); } }); $('.num_area').on('mouseenter', 'p', function () { const m = this.className.match(/\bp_(\d+)\b/); if (!m) return; hoveringCount++; stopAutoplay(); const id = pad2(m[1]); offAll(); $('.num_area .p_' + id).addClass('on'); const tlTargets = pToTimelineIds(id); setTimelineHoverByIds(tlTargets, true); const targetId = pickFirstExistingId(tlTargets); if (targetId) scrollToStopId(targetId, 'center'); }); $('.num_area').on('mouseleave', 'p', function () { const m = this.className.match(/\bp_(\d+)\b/); if (m) { const id = pad2(m[1]); $('.num_area .p_' + id).removeClass('on'); const tlTargets = pToTimelineIds(id); setTimelineHoverByIds(tlTargets, false); } hoveringCount = Math.max(0, hoveringCount - 1); if (hoveringCount === 0) { clearTimer(); setTimeout(() => { if (hoveringCount === 0) startAutoplay(); }, RESUME_DELAY); } }); const $fly = $('.sec-kv .kv_top .fly'); const $jet = $('.sec-kv .kv_top .jet'); const INTRO_DELAY_MS = 1000; const LOOP_BACK_AFTER_EXIT_MS = 5000; const ANIMATION_END = 'animationend webkitAnimationEnd oAnimationEnd'; let introTimer = null; let loopTimer = null; let unlockTimer = null; let inExitCycle = false; function replay($el, addCls) { $el.removeClass('fly-enter jet-enter fly-exit jet-exit'); $el.each(function(){ this.offsetWidth; }); if (addCls) $el.addClass(addCls); return $el; } function playIntro() { clearTimeout(introTimer); clearTimeout(loopTimer); clearTimeout(unlockTimer); inExitCycle = true; let done = 0; const onEnd = () => { if (++done === 2) { inExitCycle = false; clearTimeout(unlockTimer); } }; replay($fly, 'fly-enter').one(ANIMATION_END, onEnd); replay($jet, 'jet-enter').one(ANIMATION_END, onEnd); const MAX_DELAY_MS = 1000, DURATION_MS = 900, BUFFER_MS = 200; unlockTimer = setTimeout(() => { inExitCycle = false; }, MAX_DELAY_MS + DURATION_MS + BUFFER_MS); } function scheduleIntro(delayMs = INTRO_DELAY_MS) { clearTimeout(introTimer); introTimer = setTimeout(playIntro, delayMs); } function playExit() { clearTimeout(introTimer); clearTimeout(loopTimer); clearTimeout(unlockTimer); replay($fly, 'fly-exit'); replay($jet, 'jet-exit'); loopTimer = setTimeout(() => { scheduleIntro(0); }, LOOP_BACK_AFTER_EXIT_MS); } $fly.on('mouseenter', function () { if (inExitCycle) return; inExitCycle = true; playExit(); }); $fly.on('touchstart', function () { if (inExitCycle) return; inExitCycle = true; playExit(); }); scheduleIntro(INTRO_DELAY_MS); if (!MQ.matches) startAutoplay(); if ($.fn && $.fn.navScroll) { $('.overview_nav').navScroll({ mobileDropdown: false, mobileBreakpoint: 768, scrollSpy: true }); } const $timeline = $('.timeline').first(); const SCROLL_BOOST = 3.0; const MIN_STEP_PX = 60; const WHEEL_KEY = '__tlWheelHandler'; function bindWheelAsHorizontal($el){ const el = $el.get(0); if (!el || el[WHEEL_KEY]) return; const handler = (evRaw) => { if (!$timeline.hasClass('mode-a')) return; if (evRaw.ctrlKey || evRaw.metaKey) return; const absX = Math.abs(evRaw.deltaX); const absY = Math.abs(evRaw.deltaY); const forceH = evRaw.shiftKey; if (forceH || absY > absX) { evRaw.preventDefault(); let dy = evRaw.deltaY; let dx = evRaw.deltaX; if (evRaw.deltaMode === 1) { dy *= 16; dx *= 16; } else if (evRaw.deltaMode === 2) { dy *= el.clientHeight; dx *= el.clientWidth; } const primary = forceH ? (dy || dx) : dy; const step = Math.sign(primary) * Math.max(Math.abs(primary) * SCROLL_BOOST, MIN_STEP_PX); el.scrollLeft += step; } }; el.addEventListener('wheel', handler, { passive:false }); const p = el.parentElement; if (p) p.addEventListener('wheel', handler, { passive:false }); el[WHEEL_KEY] = handler; } function unbindWheelAsHorizontal($el){ const el = $el.get(0); if (!el || !el[WHEEL_KEY]) return; const handler = el[WHEEL_KEY]; el.removeEventListener('wheel', handler, { passive:false }); const p = el.parentElement; if (p) p.removeEventListener('wheel', handler, { passive:false }); el[WHEEL_KEY] = null; } function setTimelineMode(mode){ if (mode === 'a'){ $timeline.addClass('mode-a').removeClass('mode-b') .attr('aria-label','時間軸（橫向單列可捲）'); $('.btn-style-a').attr('aria-pressed','true'); $('.btn-style-b').attr('aria-pressed','false'); bindWheelAsHorizontal($timeline); }else{ $timeline.removeClass('mode-a').addClass('mode-b') .attr('aria-label','時間軸（多列）'); $('.btn-style-a').attr('aria-pressed','false'); $('.btn-style-b').attr('aria-pressed','true'); unbindWheelAsHorizontal($timeline); } } setTimelineMode('a'); $timeline.scrollLeft(0); $('.btn-style-a').on('click', () => setTimelineMode('a')); $('.btn-style-b').on('click', () => setTimelineMode('b')); $timeline.attr('tabindex','0').on('keydown', function(e){ if (!$timeline.hasClass('mode-a')) return; const step = $(this).find('.stop').first().outerWidth(true) || 320; if (e.key === 'ArrowRight'){ this.scrollLeft += step; e.preventDefault(); } if (e.key === 'ArrowLeft'){ this.scrollLeft -= step; e.preventDefault(); } }); function pickFirstExistingId(ids){ const arr = Array.isArray(ids) ? ids : [ids]; for (const id of arr) if (stopIndex[id] && stopIndex[id].length) return id; return null; } function scrollToStopId(id, align = 'center'){ if (!$timeline.hasClass('mode-a')) return; const $stop = stopIndex[id]; if (!$stop || !$stop.length) return; const container = $timeline.get(0); const el = $stop.get(0); const cardW = el.offsetWidth; const viewW = container.clientWidth; let targetLeft; if (align === 'start'){ targetLeft = el.offsetLeft - 12; }else if (align === 'end'){ targetLeft = el.offsetLeft - (viewW - cardW) + 12; }else{ targetLeft = el.offsetLeft - (viewW - cardW) / 2; } const maxLeft = container.scrollWidth - viewW; targetLeft = Math.max(0, Math.min(targetLeft, maxLeft)); try{ container.scrollTo({ left: targetLeft, behavior: 'smooth' }); }catch(_){ $timeline.stop(true).animate({ scrollLeft: targetLeft }, 400); } } }); $(function() { $(".pic_open").colorbox({ maxWidth: '96%', maxHeight: '700px', rel: 'group1' }); }); (function($){ 'use strict'; const $root = $('#lb-root'); const $mask = $root.find('.lb-mask'); const $stage = $root.find('.lb-stage'); const $close = $root.find('.lb-close'); const $content = $root.find('.lb-content'); if ($root.length === 0){ console.warn('[Lightbox] 找不到 #lb-root'); return; } const pad2 = n => String(n).padStart(2,'0'); const urlFor = id => `lightbox_${id}.html`; function idFromMark(el){ const m = el.className.match(/\bt_(\d+)\b/); return m ? pad2(m[1]) : null; } function idFromNum(el){ const m = el.className.match(/\bp_(\d+)\b/); return m ? pad2(m[1]) : null; } function idFromStop($li){ const $badge = $li.find('.badge').first(); if (!$badge.length) return null; const txt = $badge.clone().children().remove().end().text().trim(); const n = parseInt(txt,10); return Number.isNaN(n) ? null : pad2(n); } function setLoading(on){ $root.toggleClass('is-loading', !!on); } function showRoot(){ $('html,body').addClass('lb-open'); $root.addClass('is-open').attr('aria-hidden','false'); } function hideRoot(){ $root.removeClass('is-open is-loading').attr('aria-hidden','true'); $('html,body').removeClass('lb-open'); $content.empty(); } function tryLoadFromPool(id){ const $pool = $('#lb-pool'); if (!$pool.length) return false; const $frag = $pool.children(`.lightbox_${id}`).first(); if (!$frag.length) return false; $content.html($frag.clone().prop('hidden', false)); return true; } function execInsertedScripts(root){ const scripts = root.querySelectorAll('script'); scripts.forEach(old=>{ const s = document.createElement('script'); for (const attr of old.attributes) s.setAttribute(attr.name, attr.value); s.removeAttribute('defer'); if (old.textContent) s.text = old.textContent; old.parentNode.replaceChild(s, old); }); } const PAGE_MIN = 1; const PAGE_MAX = 34; const PAGE_WRAP = false; const ICON_PREV = ` <svg viewBox="0 0 24 24" width="32" height="32" fill="currentColor" aria-hidden="true"> <path d="M16 8 Q 16 6 14.4 7.2 L 9.6 10.8 Q 8 12 9.6 13.2 L 14.4 16.8 Q 16 18 16 16 L 16 8 Z"/> </svg>`; const ICON_NEXT = ` <svg viewBox="0 0 24 24" width="32" height="32" fill="currentColor" aria-hidden="true"> <path d="M8 8 Q 8 6 9.6 7.2 L 14.4 10.8 Q 16 12 14.4 13.2 L 9.6 16.8 Q 8 18 8 16 L 8 8 Z"/> </svg>`; let currentId = null; function ensurePager(){ let nav = $stage.children('.lb-pager').get(0); if (!nav){ nav = document.createElement('nav'); nav.className = 'lb-pager'; nav.setAttribute('aria-label','上一頁 / 下一頁'); nav.innerHTML = ` <a class="prev" aria-label="上一頁" rel="prev">${ICON_PREV}</a> <a class="next" aria-label="下一頁" rel="next">${ICON_NEXT}</a>`; $stage.append(nav); nav.addEventListener('click', (e) => { const a = e.target.closest('a'); if (!a) return; if (a.getAttribute('aria-disabled') === 'true') { e.preventDefault(); return; } const id = a.dataset.id; if (id) { e.preventDefault(); openLightboxById(id); } }); } return nav; } function updatePager(id){ currentId = id; const nav = ensurePager(); const aPrev = nav.querySelector('.prev'); const aNext = nav.querySelector('.next'); const n = parseInt(id,10); const prev = PAGE_WRAP ? (n===PAGE_MIN ? PAGE_MAX : n-1) : (n>PAGE_MIN ? n-1 : null); const next = PAGE_WRAP ? (n===PAGE_MAX ? PAGE_MIN : n+1) : (n<PAGE_MAX ? n+1 : null); function setBtn(a, num){ if (num){ const target = pad2(num); a.dataset.id = target; a.removeAttribute('aria-disabled'); a.classList.remove('is-disabled'); a.tabIndex = 0; }else{ a.removeAttribute('data-id'); a.setAttribute('aria-disabled','true'); a.classList.add('is-disabled'); a.tabIndex = -1; } } setBtn(aPrev, prev); setBtn(aNext, next); } $(document).on('keydown.lbPager', function(e){ if (!$root.hasClass('is-open') || !currentId) return; const n = parseInt(currentId,10); if (e.key === 'ArrowLeft'){ const prev = PAGE_WRAP ? (n===PAGE_MIN ? PAGE_MAX : n-1) : (n>PAGE_MIN ? n-1 : null); if (prev){ e.preventDefault(); openLightboxById(pad2(prev)); } }else if (e.key === 'ArrowRight'){ const next = PAGE_WRAP ? (n===PAGE_MAX ? PAGE_MIN : n+1) : (n<PAGE_MAX ? n+1 : null); if (next){ e.preventDefault(); openLightboxById(pad2(next)); } } }); async function loadRemote(id){ const url = urlFor(id); if (location.protocol === 'file:'){ $content.html(`<iframe class="lb-iframe" src="${url}" title="Lightbox ${id}" loading="lazy"></iframe>`); return; } try{ const res = await fetch(url, { cache: 'no-store' }); if (!res.ok) throw new Error(res.statusText); const html = await res.text(); $content.html(html); execInsertedScripts($content.get(0)); }catch(err){ $content.html(`<iframe class="lb-iframe" src="${url}" title="Lightbox ${id}" loading="lazy"></iframe>`); } } function openLightboxById(rawId){ if (!rawId) return; const idExact = pad2(rawId); showRoot(); setLoading(true); updatePager(idExact); if (tryLoadFromPool(idExact)){ setLoading(false); }else{ loadRemote(idExact).finally(() => setLoading(false)); } } window.openLightboxById = openLightboxById; $mask.on('click', hideRoot); $close.on('click', hideRoot); $(document).on('keydown', function(e){ if (e.key === 'Escape' && $root.hasClass('is-open')) hideRoot(); }); $('.mark_area').on('click', 'a', function(e){ e.preventDefault(); const id = idFromMark(this); if (id) openLightboxById(id); }); $('.num_area').on('click', 'p', function(){ const id = idFromNum(this); if (id) openLightboxById(id); }); $('.timeline').on('click', 'li.stop', function(){ const id = idFromStop($(this)); if (id) openLightboxById(id); }); })(jQuery); (() => { const MQ = matchMedia('(max-width:1080px)'); const CONTAINER_SEL = '.tl-wrap'; const STOP_SEL = '.timeline .stop'; const NUM_ROOT = '#AK .scalable_info_area .num_area'; const ALIAS = { '33':'10','15':'12','20':'02','30':'18','24':'14','29':'04' }; const $ = (s, r=document)=>r.querySelector(s); const $$ = (s, r=document)=>Array.from(r.querySelectorAll(s)); const pad2 = v => String(parseInt(v,10)).padStart(2,'0'); const canon = v => ALIAS[pad2(v)] || pad2(v); let armed=false, cleanup=[], rafId=null, currentLi=null, holdTarget=null, holdT0=0, lockedCode=null; const HOLD_MS = 120; function setOnFor(code){ const root = $(NUM_ROOT); if (!root || !code) return; const c = canon(code); if (lockedCode === c) return; lockedCode = c; $$('.on', root).forEach(el=>el.classList.remove('on')); const p = root.querySelector(`.p_${c}`) || root.querySelector(`.p_${parseInt(c,10)}`); if (p) p.classList.add('on'); } function direction(){ const tl = $('.timeline'); if (!tl) return 'vertical'; return (tl.scrollWidth - tl.clientWidth > 8) ? 'horizontal' : 'vertical'; } function pickByCenter(){ const container = $(CONTAINER_SEL) || $('.timeline') || document.body; const rc = container.getBoundingClientRect(); const midX = rc.left + rc.width/2; const midY = rc.top + rc.height/2; const dir = direction(); let best=null; for (const li of $$(STOP_SEL)) { const r = li.getBoundingClientRect(); const vis = r.right > rc.left && r.left < rc.right && r.bottom > rc.top && r.top < rc.bottom; if (!vis) continue; const cx = r.left + r.width/2; const cy = r.top + r.height/2; const d = (dir==='horizontal') ? Math.abs(cx - midX) : Math.abs(cy - midY); if (!best || d < best.d) best = { li, d }; } return best ? best.li : null; } function codeFromLi(li){ if (!li) return null; const dc = li.getAttribute('data-code'); if (dc) return pad2(dc); const b = li.querySelector('.badge'); if (b){ const n = parseInt((b.textContent || '').trim(), 10); if (!isNaN(n)) return pad2(n); } const all = $$(STOP_SEL); return pad2(all.indexOf(li) + 1); } function tick(){ const cand = pickByCenter(); if (!cand) return; if (cand === currentLi){ holdTarget=null; holdT0=0; return; } const now = performance.now(); if (holdTarget !== cand){ holdTarget = cand; holdT0 = now; } else if (now - holdT0 >= HOLD_MS){ currentLi = cand; setOnFor(codeFromLi(currentLi)); } } function onScroll(){ if (rafId) cancelAnimationFrame(rafId); rafId = requestAnimationFrame(tick); } function arm(){ if (armed) return; armed = true; setOnFor('01'); addEventListener('scroll', onScroll, {passive:true}); cleanup.push(()=> removeEventListener('scroll', onScroll)); const tl = $('.timeline'); if (tl){ tl.addEventListener('scroll', onScroll, {passive:true}); cleanup.push(()=> tl.removeEventListener('scroll', onScroll)); } addEventListener('resize', onScroll, {passive:true}); cleanup.push(()=> removeEventListener('resize', onScroll)); requestAnimationFrame(tick); } function disarm(){ if (!armed) return; armed = false; lockedCode = null; currentLi = null; cleanup.forEach(fn=>{ try{fn();}catch{} }); cleanup = []; } function onMQ(e){ e.matches ? arm() : disarm(); } document.addEventListener('DOMContentLoaded', ()=>{ if (MQ.matches) arm(); (MQ.addEventListener ? MQ.addEventListener('change', onMQ) : MQ.addListener(onMQ)); }); })(); (() => { const container = document.querySelector('#lb-root .lb-content'); if (!container) return; function prep(img){ if (img.dataset.lbBound) return; img.dataset.lbBound = '1'; if (!img.hasAttribute('loading')) img.loading = 'eager'; if (!img.hasAttribute('decoding')) img.decoding = 'async'; if (!img.hasAttribute('fetchpriority')) img.setAttribute('fetchpriority','high'); const reveal = () => img.classList.add('lb-ready'); if (img.complete && img.naturalWidth > 0){ if (img.decode) img.decode().then(reveal).catch(reveal); else reveal(); return; } img.addEventListener('load', () => { if (img.decode) img.decode().then(reveal).catch(reveal); else reveal(); }, { once:true }); img.addEventListener('error', reveal, { once:true }); } function scan(){ container.querySelectorAll('img').forEach(prep); } scan(); const mo = new MutationObserver(scan); mo.observe(container, { childList:true, subtree:true }); })(); (function(){ const root = document.getElementById('lb-root'); if (!root) return; const stage = root.querySelector('.lb-stage'); const content = root.querySelector('.lb-content'); function resetTop(){ if (!stage) return; const prev = stage.style.scrollBehavior; stage.style.scrollBehavior = 'auto'; stage.scrollTop = 0; if (content) content.scrollTop = 0; window.scrollTo(0, 0); requestAnimationFrame(() => { stage.scrollTop = 0; if (content) content.scrollTop = 0; }); setTimeout(() => { stage.scrollTop = 0; if (content) content.scrollTop = 0; stage.style.scrollBehavior = prev; }, 120); } root.addEventListener('click', (e) => { const btn = e.target.closest('.lb-nav-prev, .lb-nav-next'); if (!btn) return; resetTop(); }); if (content){ const mo = new MutationObserver(() => resetTop()); mo.observe(content, { childList:true, subtree:true }); } root.addEventListener('lb:content:loaded', resetTop); })();}();